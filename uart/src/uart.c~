#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#define BAUDRATE        B115200
#define UART_DEVICE     "/dev/ttyUSB0"
#define FALSE  -1
#define TRUE   0
#define TEMPERATURE 0x01 //温度传感器
#define HUMIDITY    0x02 //湿度传感器
#define VOLTAGE		0x03 //电压传感器
#define ILLUMINANCE	0x04 //光照传感器
#define PRESSURE	0x05 //压力传感器
#define INFRARED	0x06 //红外线传感器
//#define stop-success x
//#define startsuccess y

typedef unsigned char uint8;
/**
*@brief  设置串口通信速率
*@param  fd     类型 int  打开串口的文件句柄
*@param rspeed  类型 int  串口速度
*@return  void
*/


typedef struct RFTXBUF
{
	uint8 myNWK[4];//自身网络地址
	uint8 myMAC[16];//自身MAC地址
	uint8 pNWK[4];//父节点网络地址
	uint8 pMAC[16];//父节点MAC地址
}RFTX;

typedef struct
{
	RFTX addr;
	uint8 record;
}Data_t;

int speed_arr[] = {B115200, B38400, B19200, B9600, B4800, B2400, B1200, B300,
          		   B115200, B38400, B19200, B9600, B4800, B2400, B1200, B300, };
int name_arr[] = {115200, 38400, 19200, 9600, 4800, 2400, 1200,  300, 
		  		  115200, 38400, 19200, 9600, 4800, 2400, 1200,  300, };
void set_speed(int fd, int speed)
{
  int   i; 
  int   status; 
  struct termios   Opt;
  tcgetattr(fd, &Opt); 
  for ( i= 0;  i < sizeof(speed_arr) / sizeof(int);  i++) 
  { 
    if (speed == name_arr[i])
	{     
      tcflush(fd, TCIOFLUSH);     
      cfsetispeed(&Opt, speed_arr[i]);  
      cfsetospeed(&Opt, speed_arr[i]);   
      status = tcsetattr(fd, TCSANOW, &Opt);  
      if  (status != 0)
	  {        
        perror("tcsetattr fail!");  
        return;     
      }    
      tcflush(fd,TCIOFLUSH);   
    }  
  }
  printf("Set Speed Success!\n");
}
/**
*@brief   设置串口数据位，停止位和效验位
*@param  fd     类型  int  打开的串口文件句柄
*@param  databits 类型  int 数据位   取值 为 7 或者8
*@param  stopbits 类型  int 停止位   取值为 1 或者2
*@param  parity  类型  int  效验类型 取值为N,E,O,,S
*/
int set_Parity(int fd,int databits,int stopbits,int parity)
{ 
	struct termios options; 
	if( tcgetattr( fd,&options)  !=  0)
	{ 
		perror("Setup Serial fail!");     
		return(FALSE);  
	}
	options.c_cflag &= ~CSIZE; 
	switch (databits) /*设置数据位数*/
	{   
	case 7:		
		options.c_cflag |= CS7; 
		break;
	case 8:     
		options.c_cflag |= CS8;
		break;   
	default:    
		fprintf(stderr,"Unsupported data size\n"); return (FALSE);  
	}
	switch (parity) 
	{   
		case 'n':
		case 'N':    
			options.c_cflag &= ~PARENB;   /* Clear parity enable */
			options.c_iflag &= ~INPCK;     /* Enable parity checking */ 
			break;  
		case 'o':   
		case 'O':     
			options.c_cflag |= (PARODD | PARENB); /* 设置为奇效验*/  
			options.c_iflag |= INPCK;             /* Disnable parity checking */ 
			break;  
		case 'e':  
		case 'E':   
			options.c_cflag |= PARENB;     /* Enable parity */    
			options.c_cflag &= ~PARODD;   /* 转换为偶效验*/     
			options.c_iflag |= INPCK;       /* Disnable parity checking */
			break;
		case 'S': 
		case 's':  /*as no parity*/   
			options.c_cflag &= ~PARENB;
			options.c_cflag &= ~CSTOPB;break;  
		default:   
			fprintf(stderr,"Unsupported parity\n");    
			return (FALSE);  
		}  
	/* 设置停止位*/  
	switch (stopbits)
	{   
		case 1:    
			options.c_cflag &= ~CSTOPB;  
			break;  
		case 2:    
			options.c_cflag |= CSTOPB;  
		   break;
		default:    
			 fprintf(stderr,"Unsupported stop bits\n");  
			 return (FALSE); 
	} 
	/* Set input parity option */ 
	if (parity != 'n')   
		options.c_iflag |= INPCK; 
	tcflush(fd,TCIFLUSH);
	options.c_cc[VTIME] = 150; /* 设置超时15 seconds*/   
	options.c_cc[VMIN] = 0; /* Update the options and do it NOW */
	if (tcsetattr(fd,TCSANOW,&options) != 0)   
	{ 
		perror("Setup Serial 3");   
		return (FALSE);  
	} 
	options.c_lflag  &= ~(ICANON | ECHO | ECHOE | ISIG);  /*Input*/
	options.c_oflag  &= ~OPOST;   /*Output*/
	return (TRUE);  
}

int main(int argc, char *argv[])
{
    int   fd, c = 0, res, ret;
    char  buf[255];
	char  buf2[40];
	int i = 0;
	FILE *fp = NULL;
	time_t T;
	struct tm *timenow;
	char ch;

	fp = fopen("log.txt","a+");
	if (fp == NULL)
	{
		printf("fopen fail!\n");
		exit(0);
	}
	printf("fopen success!\n");
	ch = fgetc(fp);
	if (ch == EOF)
	{
		fprintf(fp,"%s","传感器类型    传感器读数    自身的网络地址    自身的MAC地址    父节点的网络地址    父节点的MAC地址    时间\n\n");
	fflush(fp);
	}
    fd = open(UART_DEVICE, O_RDWR);
    if (fd < 0) 
	{
        printf("Open UART_DEVICE Error!\n");
        exit (1);
	}
	else
		printf("Open UART_DEVICE Success!\n");

    set_speed(fd,115200);	//设置波特率
	if (set_Parity(fd,8,1,'N') == FALSE)  //设置数据位,结束位,校验
	{
		printf("Set Parity Error\n");
		exit (0);
	}
	else
		printf("Set Parity Success!\n");

   while(1) 
	{
		memset(buf, 0, sizeof(buf));
        res = read(fd, buf, 1);
        if(res == 0)
            continue;
		else
		{
			time(&T);
			timenow = localtime(&T);
		}
		if(buf[0] != '@')	//数据传输的开始
			continue;
		memset(buf, 0, sizeof(buf));
		res = read(fd, buf, 1);
		if(res == 0)
			continue;
		if(buf[0] == 'x' || buf[0] == 'y')	//判断是否是控制信息
		{
			if(buf[0] == 'x')	//收到stop-send信息
			{
				printf("stop success!\n");
				res = read(fd, buf, 1);	//将随后的结束符读取
				printf("=========================================\n");
				continue;
			}
			if(buf[0] == 'y')	//收到startsend信息
			{
				printf("start success!\n");
				res = read(fd, buf, 1);
				printf("=========================================\n");
				continue;
			}
		}
		else
		{
			switch(buf[0])	//判断传感器类型
			{
				case 0x01:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);	//读取传感器传来的数据值
					if(res == 0)
						continue;
					else
					{
						printf("温度是 %d 摄氏度\n",buf[0]);
						fprintf(fp,"%s","温度传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				case 0x02:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);
					if(res == 0)
						continue;
					else
					{
						printf("湿度是 %d \n",buf[0]);
						fprintf(fp,"%s","湿度传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				case 0x03:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);
					if(res == 0)
						continue;
					else
					{
						printf("电压是 %d V\n",buf[0]);
						fprintf(fp,"%s","电压传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				case 0x04:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);
					if(res == 0)
						continue;
					else
					{
						printf("光照度是 %d Lx\n",buf[0]);
						fprintf(fp,"%s","光照传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				case 0x05:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);
					if(res == 0)
						continue;
					else
					{
						printf("压力是 %d Pa\n",buf[0]);
						fprintf(fp,"%s","压力传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				case 0x06:
					memset(buf, 0, sizeof(buf));
					res = read(fd, buf, 1);
					if(res == 0)
						continue;
					else
					{
						printf("红外线是 %d mw\n",buf[0]);
						fprintf(fp,"%s","红外传感器    ");
						fprintf(fp,"    %-10d",buf[0]);
						fflush(fp);
					}
					break;
				default:
					printf("未知传感器!\n");
					break;
			}
		}
		memset(buf, 0, sizeof(buf));
        res = read(fd, buf, 40);	//读取数据包的地址信息
        if(res == 0)
            continue;
		while(res < 40)	
		{
			memset(buf2, 0, sizeof(buf2));
			ret = read(fd, buf2, 40 - res);
			res += ret;
			strcat(buf,buf2);
		}
       // buf[res] = '\0';
		
		printf("自身的网络地址是:");//	按定义的数据包结构解析地址
		fprintf(fp,"%s","    ");
		for (i = 0; i < 4; ++i)
		{
			printf("%c", buf[i]);
			fprintf(fp,"%c",buf[i]);
		}
			fprintf(fp,"%s","          ");
			fflush(fp);
		printf("\n");

		printf("自身的MAC地址是:");
		for (i = 4; i < 20; ++i)
		{	
			printf("%c", buf[i]);
			fprintf(fp,"%c",buf[i]);
		}
			fprintf(fp,"%s"," ");
			fflush(fp);
		printf("\n");

		printf("父节点的网络地址是:");
		fprintf(fp,"%s","    ");
		for (i = 20; i < 24; ++i)
		{
			printf("%c", buf[i]);
			fprintf(fp,"%c",buf[i]);
		}
			fprintf(fp,"%s","            ");
			fflush(fp);
		printf("\n");

		printf("父节点的MAC地址是:");
		for (i = 24; i < 40; ++i)
		{
			printf("%c", buf[i]);
			fprintf(fp,"%c",buf[i]);
		}
			fprintf(fp,"%s","   ");
			fprintf(fp,"%s",asctime(timenow));
			fflush(fp);
        res = read(fd, buf, 1);
        if(res == 0)
            continue;
		if(buf[0] == '@')	//将消息的结束符@读走
		{
			printf("\n");
			fprintf(fp,"%s","\n");
			fflush(fp);
		}
	printf("=========================================\n");
    }
  
  


	fclose(fp);
    printf("Close...\n");
    close(fd);
    return 0;
}



